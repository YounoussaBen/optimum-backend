# Generated by Django 5.2.3 on 2025-07-25 16:07

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProofOfLifeSettings",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "minimum_confidence_score",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.85"),
                        help_text="Minimum confidence score required for successful verification",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "minimum_liveness_score",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.80"),
                        help_text="Minimum liveness score required for successful verification",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "verification_interval_days",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Number of days between required verifications",
                    ),
                ),
                (
                    "grace_period_days",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Number of days after due date before blocking actions",
                    ),
                ),
                (
                    "first_reminder_days",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="Days before due date to send first reminder",
                    ),
                ),
                (
                    "urgent_reminder_days",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Days before due date to send urgent reminder",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When these settings were created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When these settings were last updated"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who last updated these settings",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Proof of Life Settings",
                "verbose_name_plural": "Proof of Life Settings",
                "db_table": "proof_of_life_settings",
            },
        ),
        migrations.CreateModel(
            name="ProofOfLifeVerification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the verification record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "verification_id",
                    models.CharField(
                        help_text="Unique identifier for this verification session",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="confidence score (0.000 to 1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "liveness_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="liveness score (0.000 to 1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "verification_date",
                    models.DateTimeField(
                        help_text="When the verification was performed"
                    ),
                ),
                (
                    "next_due_date",
                    models.DateTimeField(
                        help_text="When the next verification is due (30 days from verification)"
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        help_text="Device identifier from the app", max_length=255
                    ),
                ),
                (
                    "device_platform",
                    models.CharField(
                        choices=[
                            ("android", "Android"),
                            ("ios", "iOS"),
                            ("web", "Web"),
                        ],
                        help_text="Platform the verification was performed on",
                        max_length=20,
                    ),
                ),
                (
                    "app_version",
                    models.CharField(
                        help_text="App version used for verification", max_length=50
                    ),
                ),
                (
                    "os_version",
                    models.CharField(
                        help_text="Operating system version", max_length=50
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("current", "Current"),
                            ("due_soon", "Due Soon"),
                            ("overdue", "Overdue"),
                            ("blocked", "Blocked"),
                        ],
                        default="current",
                        help_text="Current status of the verification",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who performed the verification",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proof_of_life_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Proof of Life Verification",
                "verbose_name_plural": "Proof of Life Verifications",
                "db_table": "proof_of_life_verifications",
                "ordering": ["-verification_date"],
            },
        ),
        migrations.CreateModel(
            name="ProofOfLifeAuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the audit log entry",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("verification_attempt", "Verification Attempt"),
                            ("verification_success", "Verification Success"),
                            ("verification_failure", "Verification Failure"),
                            ("status_update", "Status Update"),
                            ("admin_override", "Admin Override"),
                            ("settings_update", "Settings Update"),
                        ],
                        help_text="Type of action performed",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the action"),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Additional metadata about the action (scores, device info, etc.)",
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the action was performed",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent string from the request",
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this action occurred",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with this action",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proof_of_life_audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verification",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated verification record if applicable",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="proof_of_life.proofoflifeverification",
                    ),
                ),
            ],
            options={
                "verbose_name": "Proof of Life Audit Log",
                "verbose_name_plural": "Proof of Life Audit Logs",
                "db_table": "proof_of_life_audit_logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ProofOfLifePendingVerification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the pending verification",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="confidence score (0.000 to 1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "liveness_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="liveness score (0.000 to 1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        help_text="Device identifier from the app", max_length=255
                    ),
                ),
                (
                    "device_platform",
                    models.CharField(
                        choices=[
                            ("android", "Android"),
                            ("ios", "iOS"),
                            ("web", "Web"),
                        ],
                        help_text="Platform the verification was performed on",
                        max_length=20,
                    ),
                ),
                (
                    "app_version",
                    models.CharField(
                        help_text="App version used for verification", max_length=50
                    ),
                ),
                (
                    "os_version",
                    models.CharField(
                        help_text="Operating system version", max_length=50
                    ),
                ),
                (
                    "session_token",
                    models.CharField(
                        help_text="Unique session token for this verification attempt",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "face_verification_timestamp",
                    models.DateTimeField(
                        help_text="When the face verification was completed"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When this pending verification expires (10 minutes)"
                    ),
                ),
                (
                    "is_otp_sent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether OTP has been sent for this verification",
                    ),
                ),
                (
                    "otp_method",
                    models.CharField(
                        blank=True,
                        choices=[("email", "Email"), ("sms", "SMS")],
                        help_text="Method used to send OTP",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this pending verification was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this pending verification was last updated",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who is performing the verification",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proof_of_life_pending_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Proof of Life Pending Verification",
                "verbose_name_plural": "Proof of Life Pending Verifications",
                "db_table": "proof_of_life_pending_verifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "created_at"],
                        name="proof_of_li_user_id_4d8eda_idx",
                    ),
                    models.Index(
                        fields=["session_token"], name="proof_of_li_session_61d9c8_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="proof_of_li_expires_d1f99a_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(
                fields=["user", "verification_date"],
                name="proof_of_li_user_id_b2b7be_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(
                fields=["user", "status"], name="proof_of_li_user_id_c24714_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(
                fields=["next_due_date"], name="proof_of_li_next_du_551850_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(
                fields=["verification_date"], name="proof_of_li_verific_286041_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(fields=["status"], name="proof_of_li_status_87a3bf_idx"),
        ),
        migrations.AddIndex(
            model_name="proofoflifeverification",
            index=models.Index(
                fields=["verification_id"], name="proof_of_li_verific_619050_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeauditlog",
            index=models.Index(
                fields=["user", "timestamp"], name="proof_of_li_user_id_eb686b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeauditlog",
            index=models.Index(
                fields=["action", "timestamp"], name="proof_of_li_action_117f88_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="proofoflifeauditlog",
            index=models.Index(
                fields=["timestamp"], name="proof_of_li_timesta_f83ce6_idx"
            ),
        ),
    ]
