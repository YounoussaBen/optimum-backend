version: '3.9'

services:
  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: optimum_db
    environment:
      POSTGRES_DB: optimum_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: optimum_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: optimum_web
    environment:
      - DJANGO_SETTINGS_MODULE=optimum.settings.dev
      - DB_NAME=optimum_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - AZURE_FACE_API_KEY=4nsYyv6RsLcdcwi9EpjwrN5HAR8GojsDpQPpFH83P4pEESYslq6EJQQJ99BCACYeBjFXJ3w3AAAKACOGHMcX
      - AZURE_FACE_ENDPOINT=https://eastus.api.cognitive.microsoft.com/face/v1.0/
      - AZURE_FACE_PERSON_GROUP_ID=opitmum-app-users
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      bash -c "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 --reload --workers 1 optimum.wsgi:application
      "

  # Development Django server (alternative to web service)
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: optimum_dev
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.dev
      - DB_NAME=optimum_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - AZURE_FACE_API_KEY=4nsYyv6RsLcdcwi9EpjwrN5HAR8GojsDpQPpFH83P4pEESYslq6EJQQJ99BCACYeBjFXJ3w3AAAKACOGHMcX
      - AZURE_FACE_ENDPOINT=https://eastus.api.cognitive.microsoft.com/face/v1.0/
      - AZURE_FACE_PERSON_GROUP_ID=optimum-app-users
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev
    command: >
      bash -c "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: optimum_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  default:
    name: optimum_network